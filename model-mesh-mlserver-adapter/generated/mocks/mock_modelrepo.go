// Copyright 2021 IBM Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by MockGen. DO NOT EDIT.
// Source: model-mesh-mlserver-adapter/generated/modelrepo/model_repository.pb.go

// Package mock_mlserver is a generated GoMock package.
package mock_mlserver

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	inference_model_repository "github.com/kserve/modelmesh-runtime-adapter/internal/proto/mlserver/modelrepo"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockModelRepositoryServiceClient is a mock of ModelRepositoryServiceClient interface
type MockModelRepositoryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockModelRepositoryServiceClientMockRecorder
}

// MockModelRepositoryServiceClientMockRecorder is the mock recorder for MockModelRepositoryServiceClient
type MockModelRepositoryServiceClientMockRecorder struct {
	mock *MockModelRepositoryServiceClient
}

// NewMockModelRepositoryServiceClient creates a new mock instance
func NewMockModelRepositoryServiceClient(ctrl *gomock.Controller) *MockModelRepositoryServiceClient {
	mock := &MockModelRepositoryServiceClient{ctrl: ctrl}
	mock.recorder = &MockModelRepositoryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModelRepositoryServiceClient) EXPECT() *MockModelRepositoryServiceClientMockRecorder {
	return m.recorder
}

// RepositoryIndex mocks base method
func (m *MockModelRepositoryServiceClient) RepositoryIndex(ctx context.Context, in *inference_model_repository.RepositoryIndexRequest, opts ...grpc.CallOption) (*inference_model_repository.RepositoryIndexResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RepositoryIndex", varargs...)
	ret0, _ := ret[0].(*inference_model_repository.RepositoryIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepositoryIndex indicates an expected call of RepositoryIndex
func (mr *MockModelRepositoryServiceClientMockRecorder) RepositoryIndex(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoryIndex", reflect.TypeOf((*MockModelRepositoryServiceClient)(nil).RepositoryIndex), varargs...)
}

// RepositoryModelLoad mocks base method
func (m *MockModelRepositoryServiceClient) RepositoryModelLoad(ctx context.Context, in *inference_model_repository.RepositoryModelLoadRequest, opts ...grpc.CallOption) (*inference_model_repository.RepositoryModelLoadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RepositoryModelLoad", varargs...)
	ret0, _ := ret[0].(*inference_model_repository.RepositoryModelLoadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepositoryModelLoad indicates an expected call of RepositoryModelLoad
func (mr *MockModelRepositoryServiceClientMockRecorder) RepositoryModelLoad(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoryModelLoad", reflect.TypeOf((*MockModelRepositoryServiceClient)(nil).RepositoryModelLoad), varargs...)
}

// RepositoryModelUnload mocks base method
func (m *MockModelRepositoryServiceClient) RepositoryModelUnload(ctx context.Context, in *inference_model_repository.RepositoryModelUnloadRequest, opts ...grpc.CallOption) (*inference_model_repository.RepositoryModelUnloadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RepositoryModelUnload", varargs...)
	ret0, _ := ret[0].(*inference_model_repository.RepositoryModelUnloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepositoryModelUnload indicates an expected call of RepositoryModelUnload
func (mr *MockModelRepositoryServiceClientMockRecorder) RepositoryModelUnload(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoryModelUnload", reflect.TypeOf((*MockModelRepositoryServiceClient)(nil).RepositoryModelUnload), varargs...)
}

// MockModelRepositoryServiceServer is a mock of ModelRepositoryServiceServer interface
type MockModelRepositoryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockModelRepositoryServiceServerMockRecorder
}

// MockModelRepositoryServiceServerMockRecorder is the mock recorder for MockModelRepositoryServiceServer
type MockModelRepositoryServiceServerMockRecorder struct {
	mock *MockModelRepositoryServiceServer
}

// NewMockModelRepositoryServiceServer creates a new mock instance
func NewMockModelRepositoryServiceServer(ctrl *gomock.Controller) *MockModelRepositoryServiceServer {
	mock := &MockModelRepositoryServiceServer{ctrl: ctrl}
	mock.recorder = &MockModelRepositoryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockModelRepositoryServiceServer) EXPECT() *MockModelRepositoryServiceServerMockRecorder {
	return m.recorder
}

// RepositoryIndex mocks base method
func (m *MockModelRepositoryServiceServer) RepositoryIndex(arg0 context.Context, arg1 *inference_model_repository.RepositoryIndexRequest) (*inference_model_repository.RepositoryIndexResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepositoryIndex", arg0, arg1)
	ret0, _ := ret[0].(*inference_model_repository.RepositoryIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepositoryIndex indicates an expected call of RepositoryIndex
func (mr *MockModelRepositoryServiceServerMockRecorder) RepositoryIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoryIndex", reflect.TypeOf((*MockModelRepositoryServiceServer)(nil).RepositoryIndex), arg0, arg1)
}

// RepositoryModelLoad mocks base method
func (m *MockModelRepositoryServiceServer) RepositoryModelLoad(arg0 context.Context, arg1 *inference_model_repository.RepositoryModelLoadRequest) (*inference_model_repository.RepositoryModelLoadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepositoryModelLoad", arg0, arg1)
	ret0, _ := ret[0].(*inference_model_repository.RepositoryModelLoadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepositoryModelLoad indicates an expected call of RepositoryModelLoad
func (mr *MockModelRepositoryServiceServerMockRecorder) RepositoryModelLoad(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoryModelLoad", reflect.TypeOf((*MockModelRepositoryServiceServer)(nil).RepositoryModelLoad), arg0, arg1)
}

// RepositoryModelUnload mocks base method
func (m *MockModelRepositoryServiceServer) RepositoryModelUnload(arg0 context.Context, arg1 *inference_model_repository.RepositoryModelUnloadRequest) (*inference_model_repository.RepositoryModelUnloadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepositoryModelUnload", arg0, arg1)
	ret0, _ := ret[0].(*inference_model_repository.RepositoryModelUnloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepositoryModelUnload indicates an expected call of RepositoryModelUnload
func (mr *MockModelRepositoryServiceServerMockRecorder) RepositoryModelUnload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoryModelUnload", reflect.TypeOf((*MockModelRepositoryServiceServer)(nil).RepositoryModelUnload), arg0, arg1)
}
