// Copyright 2021 IBM Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kserve/modelmesh-runtime-adapter/model-serving-puller/server (interfaces: S3Downloader)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	s3manager "github.com/IBM/ibm-cos-sdk-go/service/s3/s3manager"
	gomock "github.com/golang/mock/gomock"
	//pullerServer "github.com/kserve/modelmesh-runtime-adapter/model-serving-puller/server"
)

// MockS3Downloader is a mock of S3Downloader interface.
type MockS3Downloader struct {
	ctrl     *gomock.Controller
	recorder *MockS3DownloaderMockRecorder
}

// MockS3DownloaderMockRecorder is the mock recorder for MockS3Downloader.
type MockS3DownloaderMockRecorder struct {
	mock *MockS3Downloader
}

// NewMockS3Downloader creates a new mock instance.
func NewMockS3Downloader(ctrl *gomock.Controller) *MockS3Downloader {
	mock := &MockS3Downloader{ctrl: ctrl}
	mock.recorder = &MockS3DownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Downloader) EXPECT() *MockS3DownloaderMockRecorder {
	return m.recorder
}

// DownloadWithIterator mocks base method.
func (m *MockS3Downloader) DownloadWithIterator(arg0 context.Context, arg1 s3manager.BatchDownloadIterator, arg2 ...func(*s3manager.Downloader)) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadWithIterator", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadWithIterator indicates an expected call of DownloadWithIterator.
func (mr *MockS3DownloaderMockRecorder) DownloadWithIterator(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadWithIterator", reflect.TypeOf((*MockS3Downloader)(nil).DownloadWithIterator), varargs...)
}

// ListObjectsUnderPrefix mocks base method.
func (m *MockS3Downloader) ListObjectsUnderPrefix(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListObjectsUnderPrefix", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectsUnderPrefix indicates an expected call of ListObjectsUnderPrefix.
func (mr *MockS3DownloaderMockRecorder) ListObjectsUnderPrefix(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsUnderPrefix", reflect.TypeOf((*MockS3Downloader)(nil).ListObjectsUnderPrefix), arg0, arg1)
}

// IsSameConfig mocks base method
func (m *MockS3Downloader) IsSameConfig(arg0 interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSameConfig", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSameConfig indicates an expected call of isSameConfig
func (mr *MockS3DownloaderMockRecorder) IsSameConfig(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSameConfig", reflect.TypeOf((*MockS3Downloader)(nil).IsSameConfig), arg0)
}
